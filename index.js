require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');

const token = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEB_APP_URL;

const bot = new TelegramBot(token);
const app = express();

app.use(cors());
app.use(express.json());

// === Webhook –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// === –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞ ===
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start') {
    await bot.sendMessage(chatId, '–ê–±–æ –≤—ñ–¥–∫—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é', web_app: { url: webAppUrl } }]
        ]
      }
    });
  }

  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);
      console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∑ WebApp:', data);

      await bot.sendMessage(chatId, '‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ!');
      await bot.sendMessage(chatId, `–Ü–º º—è: ${data.name}`);
      await bot.sendMessage(chatId, `–ü—Ä—ñ–∑–≤–∏—â–µ: ${data.lastname}`);
      await bot.sendMessage(chatId, `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}`);
      await bot.sendMessage(chatId, `–ê–¥—Ä–µ—Å–∞: ${data.city}, ${data.street}`);
      await bot.sendMessage(chatId, `Email: ${data.email}`);
      await bot.sendMessage(chatId, `–ß–∞—Å: ${data.time}`);
      await bot.sendMessage(chatId, `–û–ø–ª–∞—Ç–∞: ${data.paymentMethod}`);
      await bot.sendMessage(chatId, `–°—É–º–∞: ${data.total} –≥—Ä–Ω`);

      const items = data.baskItems?.map(item => `üçî ${item.title} x${item.count}`).join('\n') || '–ë–µ–∑ —Ç–æ–≤–∞—Ä—ñ–≤';
      await bot.sendMessage(chatId, `–¢–æ–≤–∞—Ä–∏:\n${items}`);
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ WebApp –¥–∞–Ω–∏—Ö:', err);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö.');
    }
  }
});

// === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);

  // === –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook ===
  const url = process.env.RENDER_EXTERNAL_URL || `https://—Ç–≤—ñ–π-–¥–æ–º–µ–Ω.onrender.com`; // –¥–æ–¥–∞–π —Ü—é –∑–º—ñ–Ω–Ω—É –≤ Render
  await bot.setWebHook(`${url}/bot${token}`);
});
