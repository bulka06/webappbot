require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// ==== Telegram Bot ====
const token = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEB_APP_URL;
const adminChatId = process.env.ADMIN_CHAT_ID;

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ polling –∑–∞–º—ñ—Å—Ç—å webhook –¥–ª—è –Ω–∞–¥—ñ–π–Ω—ñ—à–æ—ó —Ä–æ–±–æ—Ç–∏
const bot = new TelegramBot(token, { polling: true });

const app = express();

// ==== Middleware ====
app.use(cors());
app.use(express.json());

// ==== –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ CockroachDB ====
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: true,
  }
});

// ==== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î ====
(async () => {
  const createTableQuery = `
    CREATE TABLE IF NOT EXISTS orders (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name TEXT,
      lastname TEXT,
      phone TEXT,
      city TEXT,
      street TEXT,
      email TEXT,
      delivery_time TEXT,
      payment_method TEXT,
      total NUMERIC,
      items JSONB,
      created_at TIMESTAMP DEFAULT now()
    );
  `;
  try {
    await pool.query(createTableQuery);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è orders –≥–æ—Ç–æ–≤–∞');
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:', err);
  }
})();

// ==== –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ====
const insertOrder = async (orderData) => {
  const query = `
    INSERT INTO orders
    (name, lastname, phone, city, street, email, delivery_time, payment_method, total, items)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    RETURNING id
  `;
  const values = [
    orderData.name,
    orderData.lastname,
    orderData.phone,
    orderData.city,
    orderData.street,
    orderData.email,
    orderData.time,
    orderData.paymentMethod,
    orderData.total,
    JSON.stringify(orderData.baskItems)
  ];
  const result = await pool.query(query, values);
  return result.rows[0].id;
};

// ==== Telegram WebApp: –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ ====
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`);
  
  try {
    await bot.sendMessage(chatId, '–í—ñ—Ç–∞—î–º–æ ! üõçÔ∏è');
    await bot.sendMessage(chatId, '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é', web_app: { url: webAppUrl } }]
        ]
      }
    });
    console.log(`‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${chatId}`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é:', error);
  }
});

// ==== –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É ====
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  
  if (msg?.web_app_data?.data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);
      console.log('‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∑ WebApp:', data);

      const orderId = await insertOrder(data);

      await bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!');
      await bot.sendMessage(chatId, `üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderId}`);
      await bot.sendMessage(chatId, `üë§ ${data.name} ${data.lastname}`);
      await bot.sendMessage(chatId, `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}`);
      await bot.sendMessage(chatId, `üèôÔ∏è –ê–¥—Ä–µ—Å–∞: ${data.city}, ${data.street}`);
      await bot.sendMessage(chatId, `üìß Email: ${data.email}`);
      await bot.sendMessage(chatId, `üïí –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${data.time}`);
      await bot.sendMessage(chatId, `üí≥ –û–ø–ª–∞—Ç–∞: ${data.paymentMethod}`);
      await bot.sendMessage(chatId, `üí∞ –°—É–º–∞: ${data.total} –≥—Ä–Ω`);

      const items = data.baskItems?.map(item => `üçî ${item.title} x${item.quantity}`).join('\n') || '–ë–µ–∑ —Ç–æ–≤–∞—Ä—ñ–≤';
      await bot.sendMessage(chatId, `üõí –¢–æ–≤–∞—Ä–∏:\n${items}`);
      
      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (adminChatId) {
        const adminMessage = `
üì• –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
üÜî ${orderId}
üë§ ${data.name} ${data.lastname}
üìû ${data.phone}
üèôÔ∏è ${data.city}, ${data.street}
üìß ${data.email}
üïí ${data.time}
üí≥ ${data.paymentMethod}
üí∞ ${data.total} –≥—Ä–Ω
üõí ${data.baskItems?.map(item => `‚Ä¢ ${item.title} x${item.quantity}`).join('\n') || '‚Äî'}
        `;
        await bot.sendMessage(adminChatId, adminMessage);
      }
    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ WebApp –¥–∞–Ω–∏—Ö:', err);
      await bot.sendMessage(chatId, '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö.');
    }
  }
});

// ==== –û–±—Ä–æ–±–Ω–∏–∫ POST-–∑–∞–ø–∏—Ç—É –∑ WebApp —Ñ–æ—Ä–º–∏ ====
app.post('/order', async (req, res) => {
  try {
    const data = req.body;
    console.log('üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏:', data);

    const {
      name, lastname, phone, city, street,
      email, time, paymentMethod, total, baskItems
    } = data;

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É
    const query = `
      INSERT INTO orders (
        name, lastname, phone, city, street,
        email, delivery_time, payment_method, total, items
      ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
      RETURNING id
    `;
    
    const values = [
      name, lastname, phone, city, street,
      email, time, paymentMethod, total,
      JSON.stringify(baskItems)
    ];
    
    const result = await pool.query(query, values);
    const orderId = result.rows[0].id;

    // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    if (adminChatId) {
      const message = `
üì• –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
üÜî ${orderId}
üë§ ${name} ${lastname}
üìû ${phone}
üèôÔ∏è ${city}, ${street}
üìß ${email}
üïí ${time}
üí≥ ${paymentMethod}
üí∞ ${total} –≥—Ä–Ω
üõí ${baskItems?.map(item => `‚Ä¢ ${item.title} x${item.quantity}`).join('\n') || '‚Äî'}
      `;

      await bot.sendMessage(adminChatId, message);
    }

    res.status(200).send({ success: true, orderId });

  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', err);
    res.status(500).send({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ==== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑'—î–¥–Ω–∞–Ω–Ω—è –±–æ—Ç–∞
  bot.getMe().then(botInfo => {
    console.log(`‚úÖ –ë–æ—Ç @${botInfo.username} —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ`);
  }).catch(error => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞  –∑ Telegram AP—ñ:', error);
  });
});